IO.puts("This is the Flect configuration script.")
IO.puts("Some variables will have default values that are based on guesstimations about the current system.")
IO.puts("Simply leave a variable blank to use the default value or specify a different value if needed.")
IO.puts("Note that if the guesstimation leaves a variable blank, it must be filled out manually.")
IO.puts("")

IO.puts("Press Enter to start configuring Flect.")
IO.readline()

target = list_to_binary(:erlang.system_info(:system_architecture))

IO.puts("Guesstimated target triple is: #{target}")
IO.puts("")

re = fn(re) -> Regex.match?(re, target) end

{arch, os, abi} = cond do
    re.(%r/x86_64-\w*-linux-gnu/) -> {"x86", "linux", "x86-sysv64"}
    re.(%r/i\d86-\w*-linux-gnu/) -> {"x86", "linux", "x86-sysv32"}
    true -> {"", "", ""}
end

IO.puts("Guesstimated values:")
IO.puts("")
IO.puts("    FLECT_ARCH       = #{arch}")
IO.puts("    FLECT_OS         = #{os}")
IO.puts("    FLECT_ABI        = #{abi}")
IO.puts("")

IO.puts("Guesstimation complete. Proceeding to compiler configuration.")
IO.puts("")

get = fn(var, def) ->
    cond do
        (s = list_to_binary(IO.gets("Please enter a value for #{var} [#{def}]: "))) != "\n" -> s
        def != "" -> def
        true ->
            IO.puts("Error: No value for #{var} given.")
            System.halt(1)
    end
end

arch = get.("FLECT_ARCH", arch)
os = get.("FLECT_OS", os)
abi = get.("FLECT_ABI", abi)

IO.puts("")
IO.puts("Compiler configuration complete. Proceeding to external tool configuration.")
IO.puts("")

cc = get.("FLECT_CC", "clang")
cc_type = get.("FLECT_CC_TYPE", "gcc")
ld = get.("FLECT_LD", "ld")
ld_type = get.("FLECT_LD_TYPE", "ld")

IO.puts("")
IO.puts("External tool configuration complete. Proceeding to directory hierarchy configuration.")
IO.puts("")

prefix = get.("FLECT_PREFIX", "/usr/local")
bin_dir = get.("FLECT_BIN_DIR", File.join(prefix, "bin"))
lib_dir = get.("FLECT_LIB_DIR", File.join(prefix, "lib"))
st_lib_dir = get.("FLECT_ST_LIB_DIR", File.join(lib_dir, "static"))
sh_lib_dir = get.("FLECT_SH_LIB_DIR", File.join(lib_dir, "shared"))

IO.puts("")
IO.puts("Directory hierarchy configuration complete.")
IO.puts("")

IO.puts("Configuration:")
IO.puts("")
IO.puts("    FLECT_ARCH       = #{arch}")
IO.puts("    FLECT_OS         = #{os}")
IO.puts("    FLECT_ABI        = #{abi}")
IO.puts("")
IO.puts("    FLECT_CC         = #{cc}")
IO.puts("    FLECT_CC_TYPE    = #{cc_type}")
IO.puts("    FLECT_LD         = #{ld}")
IO.puts("    FLECT_LD_TYPE    = #{ld_type}")
IO.puts("")
IO.puts("    FLECT_PREFIX     = #{prefix}")
IO.puts("    FLECT_BIN_DIR    = #{bin_dir}")
IO.puts("    FLECT_LIB_DIR    = #{lib_dir}")
IO.puts("    FLECT_ST_LIB_DIR = #{st_lib_dir}")
IO.puts("    FLECT_SH_LIB_DIR = #{sh_lib_dir}")
IO.puts("")

IO.puts("Press Enter to write the configuration.")
IO.readline()

cfg = "# Generated by config.exs on #{inspect(:erlang.localtime())}

export FLECT_ARCH       ?= #{arch}
export FLECT_OS         ?= #{os}
export FLECT_ABI        ?= #{abi}

export FLECT_CC         ?= #{cc}
export FLECT_CC_TYPE    ?= #{cc_type}
export FLECT_LD         ?= #{ld}
export FLECT_LD_TYPE    ?= #{ld_type}

export FLECT_PREFIX     ?= #{prefix}
export FLECT_BIN_DIR    ?= #{bin_dir}
export FLECT_LIB_DIR    ?= #{lib_dir}
export FLECT_ST_LIB_DIR ?= #{st_lib_dir}
export FLECT_SH_LIB_DIR ?= #{sh_lib_dir}"

File.write!("config.mak", cfg)

IO.puts("Done.")
System.halt(0)
